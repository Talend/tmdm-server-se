<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     20 dÃ©c. 2005 09:21:22                                                        

     Xtentis Core
     Core Modules of Xtentis
                   
     bgrieder                                                                
     ====================================================================== -->
<project name="XtentisCore - Build" xmlns:artifact="antlib:org.apache.maven.artifact.ant" default="all">
    <description>
        Xtentis Core
    </description>
	
	<property file="build.properties" />

    <target name="prepare-maven" if="local.developer.build">
        <path id="maven-ant-tasks.classpath" path="${maven.ant.tasks.file}" />
        <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant" classpathref="maven-ant-tasks.classpath" />
    </target>
	
    <property name="version.props" value="product_version.properties" />
	<property name="build.dir" value="${basedir}/target" />
    <property name="jboss.dir" value="/home/pascal/dev/jboss/jboss-4.2.2.GA-mdm/" />
    <property name="jboss.instance.dir" value="${jboss.dir}/server/default" />
    <property name="jboss.deploy.dir" value="${jboss.instance.dir}/deploy" />
    <property name="jboss.lib.dir" value="${jboss.instance.dir}/lib" />
    <property name="jboss.bin.dir" value="${jboss.dir}/bin" />
	<property name="mdm.build.version" value="${major}.${minor}.${rev}-r${svn.revision}" />
    <property name="dev.mode.excluded.start" value="" />
    <property name="dev.mode.excluded.end" value="" />

    <property name="war" value="zz.30.core.war" />
    <property name="ejbs" value="zz.20.core.jar" />
    <property name="lib" value="z.mdm.core.jar" />
    <property name="service" value="org.talend.mdm.jullog4jservice.jar" />
    <property name="conf" value="mdm.conf" />
    <property name="conf.template" value="mdm.conf.template" />
    <property name="svn.revision" value="36233" />

    <!-- =================================
          target: all              
         ================================= -->
    <target name="all" depends="clean,compile,test,package,undeploy,deploy">
        <!-- <eclipse.refreshLocal resource="${basedir}"/> -->
    </target>
	
	<target name="clean">
        <antcall target="mvn.invoke">
            <param name="mvn.goal" value="clean" />
        </antcall>
    </target>
	
	<target name="compile" depends="version">
        <antcall target="mvn.invoke">
            <param name="mvn.goal" value="compile" />
        </antcall>
        
        <antcall target="mvn.invoke">
            <param name="mvn.goal" value="test-compile" />
        </antcall>
        
        <copy todir="bin">
           <fileset dir="target/classes" includes="**" />
           <fileset dir="target/test-classes" includes="**" />
        </copy>
    </target>

    <target name="install">
        <antcall target="mvn.invoke">
            <param name="mvn.goal" value="install" />
        </antcall>
	</target>

    <target name="create_patch">
        <echo>Creating patch ${ejbs}, ${war} ${lib} and ${conf}</echo>

        <copy file="${lib}" tofile="target/patch/ear/lib/${lib}" />
        <copy file="${ejbs}" tofile="target/patch/ear/${ejbs}" />
        <copy file="${war}" tofile="target/patch/ear/${war}" />

        <copy file="bin/datasources.xml" tofile="target/patch/resources/bin/datasources.xml" />
        <copy file="bin/default-datasources.xml" tofile="target/patch/resources/bin/default-datasources.xml" />
        <copy file="${conf}" tofile="target/patch/resources/bin/${conf}" />
        <copy file="${conf.template}" tofile="target/patch/resources/bin/${conf.template}" />
    </target>

    <target name="apply_patch">
        <property name="ear" value="${jboss.deploy.dir}/tem.ear" />
        <property name="resources" value="${jboss.dir}" />

        <!-- EAR -->
        <echo>********************************</echo>
        <echo>Patching EAR...</echo>
        <echo>********************************</echo>
        <fileset id="patch_ear_content" dir="target/patch/ear">
            <include name="**/*.*" />
        </fileset>
        <pathconvert pathsep="${line.separator}" property="patch_ear_content_info" refid="patch_ear_content" />
        <echo>Destination: ${ear}</echo>
        <echo>--- Content ---</echo>
        <echo>${patch_ear_content_info}</echo>
        <echo>--- Content ---</echo>

        <jar destfile="${ear}" update="true" duplicate="add">
            <fileset refid="patch_ear_content" />
        </jar>

        <!-- -->
        <echo>********************************</echo>
        <echo>Patching resources...</echo>
        <echo>********************************</echo>
        <fileset id="patch_resources_content" dir="target/patch/resources">
            <include name="**/*.*" />
        </fileset>
        <pathconvert pathsep="${line.separator}" property="patch_resources_content_info" refid="patch_resources_content" />
        <echo>Destination: ${resources}</echo>
        <echo>--- Content ---</echo>
        <echo>${patch_resources_content_info}</echo>
        <echo>--- Content ---</echo>
        <copy todir="${jboss.dir}" verbose="true" overwrite="true">
            <fileset refid="patch_resources_content" />
        </copy>
    </target>

    <target name="test">
    	<delete dir="${basedir}/target/data" />
        <delete dir="${basedir}/target/indexes" />
    	<antcall target="mvn.invoke">
            <param name="mvn.goal" value="test" />
        </antcall>
    </target>

    <target name="version" description="Maintain build.date property">
        <buildnumber file="${version.props}" />
        <echo>Revision Number :${svn.revision}</echo>
        <loadproperties srcfile="${version.props}">
        </loadproperties>
        <propertyfile file="${version.props}">
            <entry key="build.date" type="date" value="now" />
            <entry key="build.number" value="${svn.revision}" />
            <entry key="major" value="${major}" />
            <entry key="minor" value="${minor}" />
            <entry key="rev" value="${rev}" />
        </propertyfile>
    </target>

    <target name="package">
        <copy todir="${basedir}/bin/" verbose="true" overwrite="true">
            <fileset dir="${basedir}/src" includes="**/**.xml" />
        </copy>
        <copy todir="${basedir}/bin/" verbose="true" overwrite="true">
            <fileset dir="${basedir}/src" includes="**/**.dtd" />
        </copy>

        <jar destfile="${ejbs}" manifest="war/META-INF/MANIFEST.MF">

            <zipfileset dir=".">
                <include name="RELEASE.NOTES" />
            </zipfileset>
            <zipfileset dir=".">
                <include name="${version.props}" />
            </zipfileset>
            <zipfileset dir="bin" includes="**/*.class" />
            <zipfileset dir="src" excludes="**/*.java" />
            <zipfileset dir="war" includes="META-INF/*.*" />
            <zipfileset dir="lib" includes="*.jar" prefix="WEB-INF/lib" />
        </jar>

        <!-- used by transformer plugins -->
        <jar destfile="${lib}" manifest="war/META-INF/MANIFEST.MF">
            <zipfileset dir=".">
                <include name="${version.props}" />
            </zipfileset>
            <zipfileset dir=".">
                <include name="RELEASE.NOTES" />
            </zipfileset>
            <zipfileset dir="bin" includes="**/util/*.class" />
            <zipfileset dir="bin" includes="**/*POJO*.class" />
        </jar>

        <!-- JUL to log4j service MBean -->
        <jar destfile="target/${service}" manifest="war/META-INF/MANIFEST.MF">
            <zipfileset dir=".">
                <include name="${version.props}" />
            </zipfileset>
            <zipfileset dir=".">
                <include name="RELEASE.NOTES" />
            </zipfileset>
            <zipfileset dir="bin" includes="com/amalto/core/util/JULLog4j*.class" />
        </jar>
        
        <jar destfile="${war}" manifest="war/META-INF/MANIFEST.MF">
            <zipfileset dir="war/WEB-INF" prefix="WEB-INF">
                <include name="web.xml" />
            </zipfileset>
            <zipfileset dir="war/WEB-INF" prefix="WEB-INF">
                <include name="jboss-web.xml" />
            </zipfileset>
            <zipfileset dir=".">
                <include name="${version.props}" />
            </zipfileset>
            <zipfileset dir=".">
                <include name="RELEASE.NOTES" />
            </zipfileset>
            <zipfileset dir="bin" prefix="WEB-INF/classes" includes="**/servlet/*.class" />
            <zipfileset dir="war" includes="WEB-INF/lib/*.*" />
            <zipfileset dir="lib" includes="*.jar" prefix="WEB-INF/lib" />
        </jar>

    </target>


    <target name="undeploy" description="remove packages">
        <delete>
            <fileset dir="${jboss.lib.dir}" includes="${lib}" />
            <fileset dir="${jboss.lib.dir}" includes="${service}" />
            <fileset dir="${jboss.deploy.dir}" includes="${ejbs}" />
            <fileset dir="${jboss.deploy.dir}" includes="${war}" />
            <fileset dir="${jboss.bin.dir}" includes="${conf}" />
            <fileset dir="${jboss.bin.dir}" includes="${conf.template}" />
            <fileset dir="${jboss.bin.dir}" includes="datasources.xml.template" />
        </delete>
    </target>

    <target name="deploy">
        <echo>Deploying ${ejbs}, ${war}, ${lib}, ${service} and ${conf}</echo>

        <copy file="${lib}" tofile="${jboss.lib.dir}/${lib}" />
        <copy file="target/${service}" tofile="${jboss.lib.dir}/${service}" />
        <copy file="${ejbs}" tofile="${jboss.deploy.dir}/${ejbs}" />
        <copy file="${war}" tofile="${jboss.deploy.dir}/${war}" />
        <copy file="${conf}" tofile="${jboss.bin.dir}/${conf}" />
        <copy file="${conf.template}" tofile="${jboss.bin.dir}/${conf.template}" />
        <copy file="war/default-datasources.xml" tofile="${jboss.bin.dir}/datasources.xml.template" />
    </target>
	
    <target name="mvn.invoke" description="invokes maven" depends="prepare-maven">
        <property environment="env" />

        <artifact:mvn pom="pom.xml" mavenHome="${env.M2_HOME}" fork="true" failonerror="true">
            <arg value="-V" />
            <arg value="-Dmdm.build.dir=${build.dir}" />
            <arg value="-Dmdm.build.version=${mdm.build.version}" />
            <arg value="-Ddev.mode.excluded.start=${dev.mode.excluded.start}" />
            <arg value="-Ddev.mode.excluded.end=${dev.mode.excluded.end}" />
            <arg value="${mvn.goal}" />
        </artifact:mvn>
    </target>

</project>