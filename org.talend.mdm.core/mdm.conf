######################################################
#
# Configuration file for Talend MDM
# this file should be called mdm.conf
# and located at the root of the jboss/bin directory
#
######################################################

######################################################
# System Setting
######################################################

#mdm admin username
admin.user=admin
#mdm admin password
admin.password=talend

# http server port
http.server.port=8080

system.data.auto.init=true
system.data.auto.upgrade=true
#Means even though new Version Number is equal or less than your current system Version Number,
#migration tasks will still be executed 
system.data.force.upgrade=false

#Default system locale user could specify 
system.locale.default=en

#Browse Record web ui max export records count
max.export.browserecord=1000

#max cache size of objects
max_cache_size=5000
#init db override the cluster if exists
cluster_override=false

#BAMLogger logging 
#bam.logging=false

#XMLConfiguration for web ui
# data container in web ui configuration
#configuration.datacluster=Product
# data model in web ui configuration
#configuration.datamodel=Product
# configration reload frequency
#configuration.reloadfrequency=60

#This is a threshold number for xml db 
#when find relative entities in a data container 
#to determine to do it automatically or manually
autoentityfind.item.max=100000

######################################################
# eXist DB Setting
######################################################
xmldb.server.name=localhost
xmldb.server.port=8180
xmldb.administrator.username=admin
xmldb.administrator.password=1bc29b36f623ba82aaf6724fd3b16718
xmldb.driver=org.exist.xmldb.DatabaseImpl
xmldb.dbid=exist
xmldb.dburl=exist/xmlrpc/db
xmldb.isupurl=exist/
xmldb.type=exist
xmlserver.class=com.amalto.xmldb.XmldbSLWrapper

######################################################
# Subscription Engine
######################################################

subscription.engine.autostart=true

#The number of simultaneous routing orders executed concurrently.
#This is a token based mechanism, when all tokens are distributed,
#the next Routing Order execution is put on hold until tokens are available
#Defaults to 20
routing.engine.executors=20

#The maximum number of milliseconds a Routing Order can take to execute.
#When the timeout is reached, an error is thrown and the ROuting Order is
#moved from the ACTIVE queue to the FAILED queue
#Note: this does not prevent the Routing Order from finishing execution,
#it simply is a timed garbage collection mechanism on Routing Orders
#Defaults to 300000 e.g. 5 minutes
routing.engine.max.execution.time.millis=300000

#The number of milliseconf between two scans of Scheduled Routing Orders
#and their executor tokens allocation
#A typical cycle goes by
#   1- Reclaiming tokens of Routing Orders that finished execution (successfully or not)
#   2- Reclaiming tokens of Routing Orders that timed out (see setting above)
#   3- Allocating tokens to Routing Orders waiting for execution and scheduling their execution
routing.engine.run.period.millis=2500