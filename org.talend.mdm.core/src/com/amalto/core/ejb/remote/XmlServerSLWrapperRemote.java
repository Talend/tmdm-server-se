 /*
 * Generated by XDoclet - Do not edit!
 * this class was prodiuced by xdoclet automagically...
 */
package com.amalto.core.ejb.remote;

import java.util.*;

import org.xml.sax.InputSource;
import org.xml.sax.XMLReader;

import com.amalto.core.util.XtentisException;
import com.amalto.xmlserver.interfaces.ItemPKCriteria;

 /**
 * This class is remote adapter to XmlServerSLWrapper. It provides convenient way to access
 * facade session bean. Inverit from this class to provide reasonable caching and event handling capabilities.
 *
 * Remote facade for XmlServerSLWrapper.
 * @xdoclet-generated
 * @copyright The XDoclet Team
 * @author XDoclet
 * @version ${version}
 */

public class XmlServerSLWrapperRemote extends Observable
{
    static XmlServerSLWrapperRemote _instance = null;
    public static XmlServerSLWrapperRemote getInstance() {
        if(_instance == null) {
	   _instance = new XmlServerSLWrapperRemote();
	}
	return _instance;
    }

  /**
   * cached remote session interface
   */
  com.amalto.core.ejb.remote.XmlServerSLWrapper _session = null;
  /**
   * return session bean remote interface
   */
   protected com.amalto.core.ejb.remote.XmlServerSLWrapper getSession() {
      try {
   	if(_session == null) {
	   _session = com.amalto.core.ejb.local.XmlServerSLWrapperUtil.getHome().create();
	}
	return _session;
      } catch(Exception ex) {
        // just catch it here and return null.
        // somebody can provide better solution
	ex.printStackTrace();
	return null;
      }
   }

   public boolean isUpAndRunning (  )
	  throws java.rmi.RemoteException
   {
        boolean retval;
       retval =  getSession().isUpAndRunning(  );

      return retval;

   }

   public java.lang.String[] getAllClusters ( java.lang.String revisionID )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        java.lang.String[] retval;
       retval =  getSession().getAllClusters( revisionID );

      return retval;

   }

   public void clearCache (  )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
      getSession().clearCache(  );

   }

   public long deleteCluster ( java.lang.String revisionID,java.lang.String clusterName )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        long retval;
       retval =  getSession().deleteCluster( revisionID,clusterName );

      return retval;

   }

   public long deleteAllclusterNames ( java.lang.String revisionID )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        long retval;
       retval =  getSession().deleteAllclusterNames( revisionID );

      return retval;

   }

   public long createCluster ( java.lang.String revisionID,java.lang.String clusterName )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        long retval;
       retval =  getSession().createCluster( revisionID,clusterName );

      return retval;

   }

   public long putDocumentFromFile ( java.lang.String fileName,java.lang.String uniqueID,java.lang.String clusterName,java.lang.String revisionID )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        long retval;
       retval =  getSession().putDocumentFromFile( fileName,uniqueID,clusterName,revisionID );

      return retval;

   }

   public long putDocumentFromFile ( java.lang.String fileName,java.lang.String uniqueID,java.lang.String clusterName,java.lang.String revisionID,java.lang.String documentType )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        long retval;
       retval =  getSession().putDocumentFromFile( fileName,uniqueID,clusterName,revisionID,documentType );

      return retval;

   }

   public long putDocumentFromString ( java.lang.String xmlString,java.lang.String uniqueID,java.lang.String clusterName,java.lang.String revisionID )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        long retval;
       retval =  getSession().putDocumentFromString( xmlString,uniqueID,clusterName,revisionID );

      return retval;

   }

   public long putDocumentFromString ( java.lang.String string,java.lang.String uniqueID,java.lang.String clusterName,java.lang.String revisionID,java.lang.String documentType )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        long retval;
       retval =  getSession().putDocumentFromString( string,uniqueID,clusterName,revisionID,documentType );

      return retval;

   }

   public long putDocumentFromDOM ( org.w3c.dom.Element root,java.lang.String uniqueID,java.lang.String clusterName,java.lang.String revisionID )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        long retval;
       retval =  getSession().putDocumentFromDOM( root,uniqueID,clusterName,revisionID );

      return retval;

   }

   public long putDocumentFromSAX(String dataClusterName, XMLReader docReader, InputSource input, String revisionId)
      throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        long retval;
       retval =  getSession().putDocumentFromSAX( dataClusterName,docReader,input,revisionId );

      return retval;
   }

   public java.lang.String getDocumentAsString ( java.lang.String revisionID,java.lang.String clusterName,java.lang.String uniqueID )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        java.lang.String retval;
       retval =  getSession().getDocumentAsString( revisionID,clusterName,uniqueID );

      return retval;

   }

   public boolean existCluster ( java.lang.String revision,java.lang.String cluster )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        boolean retval;
       retval =  getSession().existCluster( revision,cluster );

      return retval;

   }

   public java.lang.String getDocumentAsString ( java.lang.String revisionID,java.lang.String clusterName,java.lang.String uniqueID,java.lang.String encoding )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        java.lang.String retval;
       retval =  getSession().getDocumentAsString( revisionID,clusterName,uniqueID,encoding );

      return retval;

   }

   public byte[] getDocumentBytes ( java.lang.String revisionID,java.lang.String clusterName,java.lang.String uniqueID,java.lang.String documentType )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        byte[] retval;
       retval =  getSession().getDocumentBytes( revisionID,clusterName,uniqueID,documentType );

      return retval;

   }

   public java.lang.String[] getAllDocumentsUniqueID ( java.lang.String revisionID,java.lang.String clusterName )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        java.lang.String[] retval;
       retval =  getSession().getAllDocumentsUniqueID( revisionID,clusterName );

      return retval;

   }

   public long deleteDocument ( java.lang.String revisionID,java.lang.String clusterName,java.lang.String uniqueID )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        long retval;
       retval =  getSession().deleteDocument( revisionID,clusterName,uniqueID );

      return retval;

   }

   public long deleteDocument ( java.lang.String revisionID,java.lang.String clusterName,java.lang.String uniqueID,java.lang.String documentType )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        long retval;
       retval =  getSession().deleteDocument( revisionID,clusterName,uniqueID,documentType );

      return retval;

   }

   public int deleteXtentisObjects ( java.util.HashMap objectRootElementNameToRevisionID,java.util.HashMap objectRootElementNameToClusterName,java.lang.String objectRootElementName,com.amalto.xmlserver.interfaces.IWhereItem whereItem )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        int retval;
       retval =  getSession().deleteXtentisObjects( objectRootElementNameToRevisionID,objectRootElementNameToClusterName,objectRootElementName,whereItem );

      return retval;

   }

   public int deleteItems ( java.util.LinkedHashMap conceptPatternsToRevisionID,java.util.LinkedHashMap conceptPatternsToClusterName,java.lang.String conceptName,com.amalto.xmlserver.interfaces.IWhereItem whereItem )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        int retval;
       retval =  getSession().deleteItems( conceptPatternsToRevisionID,conceptPatternsToClusterName,conceptName,whereItem );

      return retval;

   }

   public long moveDocumentById ( java.lang.String sourceRevisionID,java.lang.String sourceclusterName,java.lang.String uniqueID,java.lang.String targetRevisionID,java.lang.String targetclusterName )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        long retval;
       retval =  getSession().moveDocumentById( sourceRevisionID,sourceclusterName,uniqueID,targetRevisionID,targetclusterName );

      return retval;

   }

   public long countItems ( java.util.LinkedHashMap conceptPatternsToRevisionID,java.util.LinkedHashMap conceptPatternsToClusterName,java.lang.String conceptName,com.amalto.xmlserver.interfaces.IWhereItem whereItem )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        long retval;
       retval =  getSession().countItems( conceptPatternsToRevisionID,conceptPatternsToClusterName,conceptName,whereItem );

      return retval;

   }

   public long countXtentisObjects ( java.util.HashMap objectRootElementNameToRevisionID,java.util.HashMap objectRootElementNameToClusterName,java.lang.String mainObjectRootElementName,com.amalto.xmlserver.interfaces.IWhereItem whereItem )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        long retval;
       retval =  getSession().countXtentisObjects( objectRootElementNameToRevisionID,objectRootElementNameToClusterName,mainObjectRootElementName,whereItem );

      return retval;

   }

   public java.util.ArrayList runQuery ( java.lang.String revisionID,java.lang.String clusterName,java.lang.String query,java.lang.String[] parameters )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        java.util.ArrayList retval;
       retval =  getSession().runQuery( revisionID,clusterName,query,parameters );

      return retval;

   }

   public java.util.ArrayList runQuery ( java.lang.String revisionID,java.lang.String clusterName,java.lang.String query,java.lang.String[] parameters,int start,int limit,boolean withTotalCount )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        java.util.ArrayList retval;
       retval =  getSession().runQuery( revisionID,clusterName,query,parameters,start,limit,withTotalCount );

      return retval;

   }
   
   public List<String> getItemPKsByCriteria(ItemPKCriteria criteria) throws XtentisException, java.rmi.RemoteException {
       List<String> retval =  getSession().getItemPKsByCriteria(criteria);
      return retval;
   }

   public java.lang.String getXtentisObjectsQuery ( java.util.HashMap objectRootElementNameToRevisionID,java.util.HashMap objectRootElementNameToClusterName,java.lang.String mainObjectRootElementName,java.util.ArrayList viewableObjectElements,com.amalto.xmlserver.interfaces.IWhereItem whereItem,java.lang.String orderBy,java.lang.String direction,int start,int limit )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        java.lang.String retval;
       retval =  getSession().getXtentisObjectsQuery( objectRootElementNameToRevisionID,objectRootElementNameToClusterName,mainObjectRootElementName,viewableObjectElements,whereItem,orderBy,direction,start,limit );

      return retval;

   }
   
   public java.lang.String getXtentisObjectsQuery ( java.util.LinkedHashMap objectRootElementNameToRevisionID,java.util.LinkedHashMap objectRootElementNameToClusterName,java.lang.String mainObjectRootElementName,java.util.ArrayList viewableObjectElements,com.amalto.xmlserver.interfaces.IWhereItem whereItem,java.lang.String orderBy,java.lang.String direction,int start,int limit,boolean withTotalCount )
      throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        java.lang.String retval;
       retval =  getSession().getXtentisObjectsQuery( objectRootElementNameToRevisionID,objectRootElementNameToClusterName,mainObjectRootElementName,viewableObjectElements,whereItem,orderBy,direction,start,limit,withTotalCount );

   return retval;

   }

   public java.lang.String getItemsQuery ( java.util.LinkedHashMap conceptPatternsToRevisionID,java.util.LinkedHashMap conceptPatternsToClusterName,java.lang.String forceMainPivot,java.util.ArrayList viewableFullPaths,com.amalto.xmlserver.interfaces.IWhereItem whereItem,java.lang.String orderBy,java.lang.String direction,int start,int limit,int spellThreshold )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        java.lang.String retval;
       retval =  getSession().getItemsQuery( conceptPatternsToRevisionID,conceptPatternsToClusterName,forceMainPivot,viewableFullPaths,whereItem,orderBy,direction,start,limit,spellThreshold );

      return retval;

   }

   public java.lang.String getItemsQuery ( java.util.LinkedHashMap conceptPatternsToRevisionID,java.util.LinkedHashMap conceptPatternsToClusterName,java.lang.String forceMainPivot,java.util.ArrayList viewableFullPaths,com.amalto.xmlserver.interfaces.IWhereItem whereItem,java.lang.String orderBy,java.lang.String direction,int start,int limit,int spellThreshold,boolean firstTotalCount,java.util.Map metaDataTypes )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        java.lang.String retval;
       retval =  getSession().getItemsQuery( conceptPatternsToRevisionID,conceptPatternsToClusterName,forceMainPivot,viewableFullPaths,whereItem,orderBy,direction,start,limit,spellThreshold,firstTotalCount,metaDataTypes );

      return retval;

   }

   public java.lang.String getPivotIndexQuery ( java.lang.String clusterName,java.lang.String mainPivotName,java.util.LinkedHashMap pivotWithKeys,java.util.LinkedHashMap itemsRevisionIDs,java.lang.String defaultRevisionID,java.lang.String[] indexPaths,com.amalto.xmlserver.interfaces.IWhereItem whereItem,java.lang.String[] pivotDirections,java.lang.String[] indexDirections,int start,int limit )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        java.lang.String retval;
       retval =  getSession().getPivotIndexQuery( clusterName,mainPivotName,pivotWithKeys,itemsRevisionIDs,defaultRevisionID,indexPaths,whereItem,pivotDirections,indexDirections,start,limit );

      return retval;

   }

   public java.lang.String getChildrenItemsQuery ( java.lang.String clusterName,java.lang.String conceptName,java.lang.String[] PKXpaths,java.lang.String FKXpath,java.lang.String labelXpath,java.lang.String fatherPK,java.util.LinkedHashMap itemsRevisionIDs,java.lang.String defaultRevisionID,com.amalto.xmlserver.interfaces.IWhereItem whereItem,int start,int limit )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
        java.lang.String retval;
       retval =  getSession().getChildrenItemsQuery( clusterName,conceptName,PKXpaths,FKXpath,labelXpath,fatherPK,itemsRevisionIDs,defaultRevisionID,whereItem,start,limit );

      return retval;

   }

   public boolean supportTransaction (  )
	  throws java.rmi.RemoteException
   {
        boolean retval;
       retval =  getSession().supportTransaction(  );

      return retval;

   }

   public void start ( String dataClusterName  )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
      getSession().start( dataClusterName );

   }

   public void commit ( String dataClusterName )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
      getSession().commit( dataClusterName );

   }

   public void rollback ( String dataClusterName )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
      getSession().rollback( dataClusterName );

   }

   public void end ( String dataClusterName )
	  throws com.amalto.core.util.XtentisException, java.rmi.RemoteException
   {
      getSession().end( dataClusterName  );

   }

  /**
   * override this method to provide feedback to interested objects
   * in case collections were changed.
   */
  public void invalidate() {

  	setChanged();
	notifyObservers();
  }
}
