/*
 * Generated by XDoclet - Do not edit!
 */
package com.amalto.core.objects.transformers.v2.ejb.local;

/**
 * Local interface for TransformerPluginV2Ctrl.
 * @xdoclet-generated
 * @copyright The XDoclet Team
 * @author XDoclet
 * @version ${version}
 */
public interface TransformerPluginV2CtrlLocal
   extends javax.ejb.EJBLocalObject
{

   public void setGlobalContext( com.amalto.core.objects.transformers.v2.util.TransformerGlobalContext gcontext ) ;

   public com.amalto.core.objects.transformers.v2.util.TransformerGlobalContext getGlobalContext(  ) ;

   /**
    * Configuration received from outbound, typically a portlet The default implementation stores the configuration string "as is"
    * @throws XtentisException
    */
   public void putConfiguration( java.lang.String configuration ) throws com.amalto.core.util.XtentisException;

   /**
    * Retrieves the configuration The default implementation renders the configuration string "as stored" and ignore the optional parameter
    * @throws XtentisException
    */
   public java.lang.String getConfiguration( java.lang.String optionalParameter ) throws com.amalto.core.util.XtentisException;

   /**
    * Configuration received from outbound, typically a portlet The default implementation stores the configuration string "as is"
    * @throws XtentisException
    */
   public void putServiceData( java.lang.String serviceData ) throws com.amalto.core.util.XtentisException;

   /**
    * Returns the unique JNDI name of the service.<br> The JNDI name must be of the type amalto/local/service/[NAME] where [NAME] matchs the pattern "[a-zA-Z][a-zA-Z0-9]*" and is unique accross services
    * @throws XtentisException
    */
   public java.lang.String getJNDIName(  ) throws com.amalto.core.util.XtentisException;

   /**
    * Returns the short description of the service in the requested language if available, the default language otherwise.<br>
    * @throws XtentisException
    */
   public java.lang.String getDescription( java.lang.String twoLettersLanguageCode ) throws com.amalto.core.util.XtentisException;

   /**
    * Returns the documentation of the service in the requested language if available, the default language otherwise.<br> The documentation should provide information on<br> &nbsp;&nbsp;&nbsp;&nbsp;-the role of the plugin<br> &nbsp;&nbsp;&nbsp;&nbsp;-the parameters with a sample<br> &nbsp;&nbsp;&nbsp;&nbsp;-the list of the inputs<br> &nbsp;&nbsp;&nbsp;&nbsp;-the list of the outputs<br>
    * @param twoLettersLanguageCode - the ISO 639 language code in small caps
    * @throws XtentisException
    */
   public java.lang.String getDocumentation( java.lang.String twoLettersLanguageCode ) throws com.amalto.core.util.XtentisException;

   /**
    * Returns a list of the input variables descriptors
    * @see TransformerPluginVariableDescriptor
    * @throws XtentisException
    */
   public java.util.ArrayList getInputVariableDescriptors( java.lang.String twoLettersLanguageCode ) throws com.amalto.core.util.XtentisException;

   /**
    * Returns a list of the output variables descriptors
    * @see TransformerPluginVariableDescriptor
    * @throws XtentisException
    */
   public java.util.ArrayList getOutputVariableDescriptors( java.lang.String twoLettersLanguageCode ) throws com.amalto.core.util.XtentisException;

   /**
    * Initializes the plugin. <br> During atransformer execution, the init method is called once per Processing Step before the first execution of the step<br> The plugin can add elements to the context which will be available during the execute phase<br> Processing should be implemented in {@link #execute(TransformerPluginContext)} <br>
    * @param context The plugin context
    * @param compiledParameters - The Processing Step compiled parameters - see {@link #compileParameters(String)}
    * @throws XtentisException
    */
   public void init( com.amalto.core.objects.transformers.v2.util.TransformerPluginContext context,java.lang.String compiledParameters ) throws com.amalto.core.util.XtentisException;

   /**
    * Called by the transformer to request that the plugin processing executes. (the execute phase)<br> <br> When content is ready, the plugin should not try to pass the content directly to the pipeline but<br> rather push it via the callback available in the context <br> <code> context.getPluginCallBack().contentIsReady(context); </code>
    */
   public void execute( com.amalto.core.objects.transformers.v2.util.TransformerPluginContext context ) throws com.amalto.core.util.XtentisException;

   /**
    * Returns the XML schema for the parameters<br> Can be null
    * @throws XtentisException
    */
   public java.lang.String getParametersSchema(  ) throws com.amalto.core.util.XtentisException;

   /**
    * Compile the Processing Step parameters<r> Typically used to check that the parameters are correct when the Transformer is saved<br> The compiled parameters are then passed on the init() call.<br>
    * @throws XtentisException
    */
   public java.lang.String compileParameters( java.lang.String parameters ) throws com.amalto.core.util.XtentisException;

   /**
    * Called by the transformer when the process completes.<br> Typically used to clean up pipeline variables or close connections. The default implementation cleans up the TransformerPlugin Context
    */
   public void end( com.amalto.core.objects.transformers.v2.util.TransformerPluginContext context ) throws com.amalto.core.util.XtentisException;

}
