/*
 * Generated by XDoclet - Do not edit!
 */
package com.amalto.core.server.api;

import com.amalto.core.objects.routing.AbstractRoutingOrderV2POJO;
import com.amalto.core.objects.routing.AbstractRoutingOrderV2POJOPK;
import com.amalto.core.objects.routing.ActiveRoutingOrderV2POJO;
import com.amalto.core.objects.universe.UniversePOJO;
import com.amalto.core.util.XtentisException;

public interface RoutingOrder {
   /**
    * Executes a Routing Order now
    * @throws com.amalto.core.util.XtentisException
    */
   public String executeSynchronously(AbstractRoutingOrderV2POJO routingOrderPOJO) throws XtentisException;

   /**
    * Executes a Routing Order now
    * @throws com.amalto.core.util.XtentisException
    */
   public String executeSynchronously(AbstractRoutingOrderV2POJO routingOrderPOJO, boolean cleanUpRoutingOrder) throws XtentisException;

   /**
    * Executes a Routing Order now in a particular universe
    * @throws com.amalto.core.util.XtentisException
    */
   public String executeSynchronously(AbstractRoutingOrderV2POJO routingOrderPOJO, boolean cleanUpRoutingOrder, UniversePOJO universePOJO) throws XtentisException;

   /**
    * Executes a Routing Order in delay milliseconds
    * @throws com.amalto.core.util.XtentisException
    */
   public void executeAsynchronously(AbstractRoutingOrderV2POJO routingOrderPOJO, long delayInMillis) throws XtentisException;

   /**
    * Executes a Routing Order in default DELAY milliseconds
    * @throws com.amalto.core.util.XtentisException
    */
   public void executeAsynchronously(AbstractRoutingOrderV2POJO routingOrderPOJO) throws XtentisException;

   /**
    * Remove an item
    * @throws com.amalto.core.util.XtentisException
    */
   public AbstractRoutingOrderV2POJOPK removeRoutingOrder(AbstractRoutingOrderV2POJOPK pk) throws XtentisException;

   /**
    * Creates or updates a Transformer
    * @throws com.amalto.core.util.XtentisException
    */
   public AbstractRoutingOrderV2POJOPK putRoutingOrder(AbstractRoutingOrderV2POJO routingOrderPOJO) throws XtentisException;

   /**
    * Get Routing Order
    * @throws com.amalto.core.util.XtentisException
    */
   public AbstractRoutingOrderV2POJO getRoutingOrder(AbstractRoutingOrderV2POJOPK pk) throws XtentisException;

   /**
    * Get a RoutingOrder knowing its class - no exception is thrown: returns null if not found
    * @throws com.amalto.core.util.XtentisException
    */
   public AbstractRoutingOrderV2POJO existsRoutingOrder(AbstractRoutingOrderV2POJOPK pk) throws XtentisException;

   /**
    * Find Active Routing Orders
    * @throws com.amalto.core.util.XtentisException
    */
   public ActiveRoutingOrderV2POJO[] findActiveRoutingOrders(long lastScheduledTime, int maxRoutingOrders) throws XtentisException;

   /**
    * Find Dead Routing Orders
    * @throws com.amalto.core.util.XtentisException
    */
   public ActiveRoutingOrderV2POJO[] findDeadRoutingOrders(long maxLastRunStartedTime, int maxRoutingOrders) throws XtentisException;

   /**
    * Retrieve all Active Routing Order PKs
    * @throws com.amalto.core.util.XtentisException
    */
   public java.util.Collection getActiveRoutingOrderPKs(String regex) throws XtentisException;

   /**
    * Retrieve all Completed Routing Order PKs
    * @throws com.amalto.core.util.XtentisException
    */
   public java.util.Collection getCompletedRoutingOrderPKs(String regex) throws XtentisException;

   /**
    * Retrieve all Failed Routing Order PKs
    * @throws com.amalto.core.util.XtentisException
    */
   public java.util.Collection getFailedRoutingOrderPKs(String regex) throws XtentisException;

   /**
    * Retrieve all RoutingOrder PKs whatever the class
    * @throws com.amalto.core.util.XtentisException
    */
   public java.util.Collection getAllRoutingOrderPKs(String regex) throws XtentisException;

   /**
    * Retrieve all RoutingOrder PKs by CriteriaWithPaging
    * @throws com.amalto.core.util.XtentisException
    */
   public java.util.Collection getRoutingOrderPKsByCriteriaWithPaging(Class<? extends AbstractRoutingOrderV2POJO> routingOrderV2POJOClass, String anyFieldContains, String name,
                                                                      long timeCreatedMin, long timeCreatedMax, long timeScheduledMin, long timeScheduledMax, long timeLastRunStartedMin,
                                                                      long timeLastRunStartedMax, long timeLastRunCompletedMin, long timeLastRunCompletedMax, String itemConceptContains,
                                                                      String itemIDsContain, String serviceJNDIContains, String serviceParametersContains, String messageContains,
                                                                      int start, int limit, boolean withTotalCount) throws XtentisException;

   /**
    * Retrieve all RoutingOrder PKs by Criteria
    * @throws com.amalto.core.util.XtentisException
    */
   public java.util.Collection getRoutingOrderPKsByCriteria(Class<? extends AbstractRoutingOrderV2POJO> routingOrderV2POJOClass,
                                                            String anyFieldContains,
                                                            String name,
                                                            long timeCreatedMin, long timeCreatedMax,
                                                            long timeScheduledMin, long timeScheduledMax,
                                                            long timeLastRunStartedMin, long timeLastRunStartedMax,
                                                            long timeLastRunCompletedMin, long timeLastRunCompletedMax,
                                                            String itemConceptContains,
                                                            String itemIDsContain,
                                                            String serviceJNDIContains,
                                                            String serviceParametersContains,
                                                            String messageContains) throws XtentisException;

}
