// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation （1.1.2_01，编译版 R40）
// Generated source version: 1.1.2

package com.amalto.core.webservice;


import java.util.Map;
import java.util.HashMap;

public class WSStringPredicate {
    private java.lang.String value;
    private static Map valueMap = new HashMap();
    public static final String _NONEString = "NONE";
    public static final String _ORString = "OR";
    public static final String _ANDString = "AND";
    public static final String _STRICTANDString = "STRICTAND";
    public static final String _EXACTLYString = "EXACTLY";
    public static final String _NOTString = "NOT";
    
    public static final java.lang.String _NONE = new java.lang.String(_NONEString);
    public static final java.lang.String _OR = new java.lang.String(_ORString);
    public static final java.lang.String _AND = new java.lang.String(_ANDString);
    public static final java.lang.String _STRICTAND = new java.lang.String(_STRICTANDString);
    public static final java.lang.String _EXACTLY = new java.lang.String(_EXACTLYString);
    public static final java.lang.String _NOT = new java.lang.String(_NOTString);
    
    public static final WSStringPredicate NONE = new WSStringPredicate(_NONE);
    public static final WSStringPredicate OR = new WSStringPredicate(_OR);
    public static final WSStringPredicate AND = new WSStringPredicate(_AND);
    public static final WSStringPredicate STRICTAND = new WSStringPredicate(_STRICTAND);
    public static final WSStringPredicate EXACTLY = new WSStringPredicate(_EXACTLY);
    public static final WSStringPredicate NOT = new WSStringPredicate(_NOT);
    
    protected WSStringPredicate(java.lang.String value) {
        this.value = value;
        valueMap.put(this.toString(), this);
    }
    
    public java.lang.String getValue() {
        return value;
    }
    
    public static WSStringPredicate fromValue(java.lang.String value)
        throws java.lang.IllegalStateException {
        if (NONE.value.equals(value)) {
            return NONE;
        } else if (OR.value.equals(value)) {
            return OR;
        } else if (AND.value.equals(value)) {
            return AND;
        } else if (STRICTAND.value.equals(value)) {
            return STRICTAND;
        } else if (EXACTLY.value.equals(value)) {
            return EXACTLY;
        } else if (NOT.value.equals(value)) {
            return NOT;
        }
        throw new IllegalArgumentException();
    }
    
    public static WSStringPredicate fromString(String value)
        throws java.lang.IllegalStateException {
        WSStringPredicate ret = (WSStringPredicate)valueMap.get(value);
        if (ret != null) {
            return ret;
        }
        if (value.equals(_NONEString)) {
            return NONE;
        } else if (value.equals(_ORString)) {
            return OR;
        } else if (value.equals(_ANDString)) {
            return AND;
        } else if (value.equals(_STRICTANDString)) {
            return STRICTAND;
        } else if (value.equals(_EXACTLYString)) {
            return EXACTLY;
        } else if (value.equals(_NOTString)) {
            return NOT;
        }
        throw new IllegalArgumentException();
    }
    
    public String toString() {
        return value.toString();
    }
    
    private Object readResolve()
        throws java.io.ObjectStreamException {
        return fromValue(getValue());
    }
    
    public boolean equals(Object obj) {
        if (!(obj instanceof WSStringPredicate)) {
            return false;
        }
        return ((WSStringPredicate)obj).value.equals(value);
    }
    
    public int hashCode() {
        return value.hashCode();
    }
}
