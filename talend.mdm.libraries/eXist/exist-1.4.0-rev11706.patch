Index: lib/core/quartz-1.6.5.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: lib/core/excalibur-cli-1.0.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: lib/core/jgroups-all-2.2.6.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: lib/core/ws-commons-util-1.0.2.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: lib/core/log4j-1.2.15.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: lib/core/commons-pool-1.5.1.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: lib/core/javax.servlet-1.4.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: lib/core/jta-1.1.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: lib/core/xmlrpc-server-3.1.2.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: lib/core/stax-api-1.0.1.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: lib/core/jline-0.9.94.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: lib/core/sunxacml-1.2.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: lib/core/antlr-2.7.7.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: lib/core/xmldb.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: lib/core/xmlrpc-client-3.1.2.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: lib/core/jEdit-syntax.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: lib/core/commons-collections-3.2.1.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: lib/core/commons-logging-1.1.1.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: lib/core/xmlrpc-common-3.1.2.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: VERSION.txt
===================================================================
--- VERSION.txt	(revision 11878)
+++ VERSION.txt	(working copy)
@@ -1,4 +1,4 @@
 #eXist build info
 project.version=1.1.2dev
 project.build=20010101
-svn.revision=0000
+svn.revision=11706-TalendPatch
Index: src/org/exist/xmlrpc/RpcConnection.java
===================================================================
--- src/org/exist/xmlrpc/RpcConnection.java	(revision 11878)
+++ src/org/exist/xmlrpc/RpcConnection.java	(working copy)
@@ -30,6 +30,7 @@
 import org.exist.collections.CollectionConfigurationManager;
 import org.exist.collections.IndexInfo;
 import org.exist.dom.*;
+import org.exist.external.org.apache.commons.io.output.ByteArrayOutputStream;
 import org.exist.memtree.NodeImpl;
 import org.exist.numbering.NodeId;
 import org.exist.protocolhandler.embedded.EmbeddedInputStream;
@@ -84,7 +85,10 @@
 public class RpcConnection implements RpcAPI {
     
     private final static Logger LOG = Logger.getLogger(RpcConnection.class);
-
+    
+    /** Flag used to retrieve remote content directly within memory instead of using a file **/
+    private static final boolean retrieveContentIntoMemory = Boolean.getBoolean("org.exist.xmlrpc.inMemory.retrieve.content");
+    
     private final static int MAX_DOWNLOAD_CHUNK_SIZE = 0x40000;
 
     protected XmldbRequestProcessorFactory factory;
@@ -2986,17 +2990,23 @@
 				throw new EXistException("index out of range");
 			
                 	HashMap result = new HashMap();
-			File tempFile = File.createTempFile("eXistRPCC", ".xml");
-			tempFile.deleteOnExit();
-			LOG.debug("Writing to temporary file: " + tempFile.getName());
-
-			FileOutputStream fos = new FileOutputStream(tempFile);
+            OutputStream contentOutputStream;
+            File tempFile;
+            if(!retrieveContentIntoMemory) {
+                tempFile = File.createTempFile("eXistRPCC", ".xml");
+                tempFile.deleteOnExit();
+                LOG.debug("Writing to temporary file: " + tempFile.getName());
+                contentOutputStream = new FileOutputStream(tempFile);
+            } else {
+                tempFile = null;
+                contentOutputStream = new ByteArrayOutputStream();
+            }
 			OutputStream os=null;
 			if(compression.equals("yes")) {
 				LOG.debug("get result with compression");
-				os = new DeflaterOutputStream(fos);
+				os = new DeflaterOutputStream(contentOutputStream);
 			} else {
-				os = fos;
+				os = contentOutputStream;
 			}
 			try {
 				Writer writer = new OutputStreamWriter(os, encoding);
@@ -3028,26 +3038,25 @@
 				} catch(IOException ioe) {
 					//IgnoreIT(R)
 				}
-				if(os!=fos)
-					try {
-						fos.close();
-					} catch(IOException ioe) {
-						//IgnoreIT(R)
-					}
 			}
-			
-			byte[] firstChunk = getChunk(tempFile, 0);
-			result.put("data", firstChunk);
-			if(tempFile.length() > MAX_DOWNLOAD_CHUNK_SIZE) {
-				result.put("handle", tempFile.getAbsolutePath());
-				result.put("offset", new Integer(firstChunk.length));
-				result.put("supports-long-offset", new Boolean(true));
-                	} else {
-				result.put("offset", new Integer(0));
-				tempFile.delete();
-                	}
-                	return result;
-
+			if(!retrieveContentIntoMemory) {
+			    byte[] firstChunk = getChunk(tempFile, 0);
+			    result.put("data", firstChunk);
+			    if(tempFile.length() > MAX_DOWNLOAD_CHUNK_SIZE) {
+			        result.put("handle", tempFile.getAbsolutePath());
+			        result.put("offset", new Integer(firstChunk.length));
+			        result.put("supports-long-offset", new Boolean(true));
+                } else {
+                    result.put("offset", new Integer(0));
+                    tempFile.delete();
+                }
+			} else {
+			    if(LOG.isDebugEnabled())
+                    LOG.debug("Retrieving content into memory");
+			    result.put("data", ((ByteArrayOutputStream)contentOutputStream).toByteArray());
+                result.put("offset", new Integer(0));
+			}
+			return result;
         	} catch (Throwable e) {
                 handleException(e);
                 return null;
Index: src/org/exist/xmldb/AbstractRemoteResource.java
===================================================================
--- src/org/exist/xmldb/AbstractRemoteResource.java	(revision 11878)
+++ src/org/exist/xmldb/AbstractRemoteResource.java	(working copy)
@@ -20,6 +20,7 @@
 import java.util.zip.DataFormatException;
 import java.util.zip.Inflater;
 
+import org.apache.log4j.Logger;
 import org.apache.xmlrpc.XmlRpcException;
 import org.exist.external.org.apache.commons.io.output.ByteArrayOutputStream;
 
@@ -35,6 +36,11 @@
 public abstract class AbstractRemoteResource
 	implements EXistResource, ExtendedResource, Resource
 {
+    private static Logger LOG = Logger.getLogger(AbstractRemoteResource.class);
+    
+    /** Flag used to download remote content directly within memory instead of using a file **/
+    private static final boolean remoteContentIntoMemory = Boolean.getBoolean("org.exist.xmldb.inMemory.remote.content");
+    
 	protected XmldbURI path = null ;
 	protected String mimeType=null;
 	protected RemoteCollection parent;
@@ -239,11 +245,10 @@
 		}
 	}
 	
-	protected void getRemoteContentIntoLocalFile(OutputStream os, boolean isRetrieve, int handle, int pos)
+	protected Object getRemoteContentIntoLocalFile(OutputStream os, boolean isRetrieve, int handle, int pos)
 		throws XMLDBException
 	{
-		FileOutputStream fos=null;
-		BufferedOutputStream bos=null;
+		OutputStream contentOutputStream=null;
 		
 		Properties properties = getProperties();
 		String command = null;
@@ -260,10 +265,18 @@
             properties = new Properties();
 		params.add(properties);
 		try {
-			File tmpfile=File.createTempFile("eXistARR",getResourceType().equals("XMLResource")?".xml":".bin");
-			tmpfile.deleteOnExit();
-			fos=new FileOutputStream(tmpfile);
-			bos=new BufferedOutputStream(fos);
+			File tmpfile;
+			if (!remoteContentIntoMemory) {
+			    tmpfile=File.createTempFile("eXistARR",getResourceType().equals("XMLResource")?".xml":".bin");
+			    tmpfile.deleteOnExit();
+			    FileOutputStream fos=new FileOutputStream(tmpfile);
+			    contentOutputStream=new BufferedOutputStream(fos);
+			} else { 
+			    if(LOG.isDebugEnabled())
+			        LOG.debug("Getting remote content into memory");
+			    tmpfile = null;
+			    contentOutputStream = new ByteArrayOutputStream();
+			}
 			
 			Map table = (Map) parent.getClient().execute(command, params);
 			String method;
@@ -288,13 +301,13 @@
 				dec.setInput(data);
 				do {
 					decLength = dec.inflate(decResult);
-					bos.write(decResult,0,decLength);
+					contentOutputStream.write(decResult,0,decLength);
 					// And other for the stream where we want to save it!
 					if(os!=null)
 						os.write(decResult,0,decLength);
 				} while(decLength==decResult.length || !dec.needsInput());
 			} else {
-				bos.write(data);
+			    contentOutputStream.write(data);
 				// And other for the stream where we want to save it!
 				if(os!=null)
 					os.write(data);
@@ -311,13 +324,13 @@
 					dec.setInput(data);
 					do {
 						decLength = dec.inflate(decResult);
-						bos.write(decResult,0,decLength);
+						contentOutputStream.write(decResult,0,decLength);
 						// And other for the stream where we want to save it!
 						if(os!=null)
 							os.write(decResult,0,decLength);
 					} while(decLength==decResult.length || !dec.needsInput());
 				} else {
-					bos.write(data);
+				    contentOutputStream.write(data);
 					// And other for the stream where we want to save it!
 					if(os!=null)
 						os.write(data);
@@ -327,7 +340,14 @@
 				dec.end();
 			
 			isLocal=false;
-			contentFile=tmpfile;
+		    Object contentObject;
+		    if (!remoteContentIntoMemory) {
+		        contentFile = tmpfile;
+		        contentObject = contentFile;
+		    } else {
+                contentObject = ((ByteArrayOutputStream) contentOutputStream).toByteArray();
+            }
+            return contentObject;
 		} catch (XmlRpcException xre) {
 			throw new XMLDBException(ErrorCodes.INVALID_RESOURCE, xre.getMessage(), xre);
 		} catch (IOException ioe) {
@@ -335,16 +355,9 @@
 		} catch (DataFormatException dfe) {
 			throw new XMLDBException(ErrorCodes.VENDOR_ERROR, dfe.getMessage(), dfe);
 		} finally {
-			if(bos!=null) {
+			if(contentOutputStream!=null) {
 				try {
-					bos.close();
-				} catch(IOException ioe) {
-					//IgnoreIT(R)
-				}
-			}
-			if(fos!=null) {
-				try {
-					fos.close();
+				    contentOutputStream.close();
 				} catch(IOException ioe) {
 					//IgnoreIT(R)
 				}
@@ -446,7 +459,7 @@
 			return inputSource;
 		
 		if(contentFile==null)
-			getRemoteContentIntoLocalFile(null,isRetrieve,handle,pos);
+		    return getRemoteContentIntoLocalFile(null, isRetrieve, handle, pos);
 		
 		return contentFile;
 	}

